#include<iostream>
#include<math.h>
using namespace std;

/*
	题目描述：
小明去游乐园玩耍，他的票一共可以玩t分钟。
游乐场一共有n个项目，编号1到n，第i个项目需要a[i]的时间。游乐场规定，在票没有到期前，拥有者都可以入场，无论完成项目出场时该票是否已经过期。
小明可以任意决定玩项目的顺序，但是每个项目他只想玩一次。问小明最长可以玩多久？
输入
第一行两个整数n，t，含义如题面，1≤n≤100，1≤t≤10000000；
接下来一行n个整数，第i个整数a[i]表示第i个项目所需的时间，1≤a[i]≤100。
输出
输出一个整数，表示小明最长可以玩多久。

样例输入
4 12
5 5 5 5
样例输出
15

Hint
补充样例：
输入样例：
4 20
10 10 10 10
输出样例：
20

  解析：
	本题要求的是最优解，这个案例采用穷举法，先将n个整数所能结合的所有解求出来，再从所有解中根据判定条件得出最优解。
	前提要先将a[]数组升序排列 再进行穷举处理。
	可优化处： 在得到每个解时判断是否超出规定时间，超出后边的就不要算，直接进行下一层，这样可以省掉很多次循环。
*/

int main(){
	int n=5;	
	int a[5]={2,5,6,8,10};
	cout<<"n="<<n<<endl;
	int t=15;
	//int *k= (int*)malloc(sizeof(int)*16);
	int k[32];//用来存储计算出的数据 剩余时间
	k[0]=t;
	cout<<"k[0]="<<k[0]<<endl;
	int i,j;
	for(i=0;i<n;i++){
		cout<<"n1="<<n<<endl;
		cout<<"进入第一层循环i="<<i<<endl;
		int p=pow(2,i);
		cout<<endl;
		cout<<endl;
		cout<<endl;
		cout<<"p="<<p<<endl;		
		for(j=0;j<pow(2,i);j++){
			cout<<"进入第二层循环"<<endl;
			k[p]=k[j]-a[i];
			cout<<"k["<<p<<"]="<<k[p]<<endl;
			p++;
		}
	}
	//将数组中剩余时间转为消费时间，进行判断最大值即是结果（最大值要小于当前项目+t）
	//定义最大值max存储相对最大时间
	int max=0;
	for(i=0;i<n;i++){
		for(j=pow(2,i);j<pow(2,i+1);j++){
			k[j]=t-k[j];
			cout<<"   k["<<j<<"]="<<k[j]<<endl;
			max=k[j]<t+a[i]&&k[j]>max?k[j]:max;
		}
	}
	cout<<"可以玩最长时间为："<<max<<endl;
	return 0;

}

